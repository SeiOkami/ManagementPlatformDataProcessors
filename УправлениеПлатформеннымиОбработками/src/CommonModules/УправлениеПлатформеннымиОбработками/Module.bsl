// @strict-types

#Область ПрограммныйИнтерфейс

// Обновить платформенные обработки.
// 
// Параметры:
//  ТолькоПриСменеВерсииПриложения - Булево
Процедура ОбновитьПлатформенныеОбработки(ТолькоПриСменеВерсииПриложения = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина); // BSLLS:SetPrivilegedMode-off
	
	ВерсияПриложения = УправлениеПлатформеннымиОбработкамиКлиентСервер.ВерсияПриложения();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВерсияПриложения", ВерсияПриложения);
	
	Если ТолькоПриСменеВерсииПриложения Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле
		|ИЗ
		|	РегистрСведений.ОбновленныеВерсииПриложения КАК Версии
		|ГДЕ
		|	Версии.ВерсияПриложения = &ВерсияПриложения";
		Если Запрос.Выполнить().Пустой() Тогда
			ТекстСообщения = СтрШаблон("Обновление платформенны обработок для версии приложения %1", ВерсияПриложения);
			УправлениеПлатформеннымиОбработкамиКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МенеджерПлатформенныхОбработок = МенеджерПлатформенныхОбработок();
	Справочники.ПлатформенныеОбработки.ЗаполнитьЭталонныеДанные(МенеджерПлатформенныхОбработок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатформенныеОбработки.Ссылка КАК Обработка,
	|	ИменаПодключенияОбработки.ПолныйПуть КАК ПолныйПуть,
	|	ИменаПодключенияОбработки.КлючевоеИмя КАК КлючевоеИмя
	|ИЗ
	|	Справочник.ПлатформенныеОбработки КАК ПлатформенныеОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПлатформенныхОбработок КАК ВерсииПлатформенныхОбработок
	|		ПО ПлатформенныеОбработки.Ссылка = ВерсииПлатформенныхОбработок.Владелец
	|			И (ВерсииПлатформенныхОбработок.Родитель = ЗНАЧЕНИЕ(Справочник.ВерсииПлатформенныхОбработок.ПустаяСсылка))
	|			И (ВерсииПлатформенныхОбработок.ВерсияПриложения = &ВерсияПриложения)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПлатформенныеОбработки.ИменаПодключения КАК ИменаПодключенияОбработки
	|		ПО ПлатформенныеОбработки.Ссылка = ИменаПодключенияОбработки.Ссылка
	|ГДЕ
	|	ВерсииПлатформенныхОбработок.Ссылка ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка	= РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СоздатьВерсиюОбработки(Выборка, ВерсияПриложения, МенеджерПлатформенныхОбработок);
		КонецЦикла;
	КонецЕсли;
	
	ОбновленнаяВерсия = РегистрыСведений.ОбновленныеВерсииПриложения.СоздатьМенеджерЗаписи();
	ОбновленнаяВерсия.ВерсияПриложения = ВерсияПриложения;
	ОбновленнаяВерсия.ДатаОбновления   = ТекущаяДатаСеанса();
	ОбновленнаяВерсия.Записать(Истина);
	
КонецПроцедуры

// Подменить платформенные обработки перед запуском системы.
Процедура ПодменитьПлатформенныеОбработкиПередЗапускомСистемы() Экспорт
	
	РезультатЗапроса = ПодменяемыеПлатформенныеОбработкиПередЗапускомСистемы();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка	= ВыборкаПодменяемыхПлатформенныхОбработокПередЗапускомСистемы(РезультатЗапроса);
		Пока Выборка.Следующий() Цикл
			ВерсияОбработки = Выборка.ВерсияОбработки;
			КлючевоеИмя = Выборка.КлючевоеИмя;
			//@skip-check query-in-loop - в данном случае лишний запрос не происходит
			ПодключитьВерсиюОбработки(ВерсияОбработки, КлючевоеИмя);			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Подключить версию обработки.
// 
// Параметры:
//  ВерсияОбработки - СправочникСсылка.ВерсииПлатформенныхОбработок
//  КлючевоеИмя - Строка
Процедура ПодключитьВерсиюОбработки(ВерсияОбработки, Знач КлючевоеИмя = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина); // BSLLS:SetPrivilegedMode-off
	
	Если ПустаяСтрока(КлючевоеИмя) Тогда
		КлючевоеИмя = ЗначениеРеквизитаОбъекта(ВерсияОбработки, "КлючевоеИмя", ""); // Строка
	КонецЕсли;
	
	СсылкаНаДанные = ПолучитьНавигационнуюСсылку(ВерсияОбработки, "ДанныеВерсии");
	
	ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
	
	ВнешниеОбработки.Подключить(СсылкаНаДанные, КлючевоеИмя, Ложь, ОписаниеЗащиты); // BSLLS:UsingExternalCodeTools-off
	
КонецПроцедуры

// Менеджер платформенных обработок.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ВыгрузкаПлатформенныхОбработок
Функция МенеджерПлатформенныхОбработок() Экспорт
	
	Возврат Обработки.ВыгрузкаПлатформенныхОбработок.Создать();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обновить платформенные обработки при смене версии приложения.
Процедура ОбновитьПлатформенныеОбработкиПриСменеВерсииПриложения() Экспорт

	ОбновитьПлатформенныеОбработки(Истина);
	
КонецПроцедуры

// Двоичные данные версии.
// 
// Параметры:
//  Версия - СправочникСсылка.ВерсииПлатформенныхОбработок
// 
// Возвращаемое значение:
//  ДвоичныеДанные, Неопределено -
Функция ДвоичныеДанныеВерсии(Версия) Экспорт
	
	ДанныеВерсии = ЗначениеРеквизитаОбъекта(Версия, "ДанныеВерсии");
	Если ТипЗнч(ДанныеВерсии) = Тип("ХранилищеЗначения") Тогда
		Возврат ДанныеВерсии.Получить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Это оригинальная версия.
// 
// Параметры:
//  Версия - СправочникСсылка.ВерсииПлатформенныхОбработок
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоОригинальнаяВерсия(Версия) Экспорт
	
	Возврат НЕ ЗначениеЗаполнено(ЗначениеРеквизитаОбъекта(Версия, "Родитель"));
	
КонецФункции

// Удалить все данные подсистемы.
Процедура УдалитьВсеДанныеПодсистемы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПлатформенныеОбработки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Справочник.ВерсииПлатформенныхОбработок";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка	= РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекущаяСсылка = Выборка[0]; // СправочникСсылка
			ТекущийОбъект = ТекущаяСсылка.ПолучитьОбъект();
			ТекущийОбъект.ОбменДанными.Загрузка = Истина;
			ТекущийОбъект.Удалить();
			
		КонецЦикла;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ПодменаПлатформенныхОбработок.СоздатьНаборЗаписей();
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Идентификатор текущего пользователя ИБ.
// 
// Возвращаемое значение:
//  УникальныйИдентификатор
Функция ИдентификаторТекущегоПользователяИБ() Экспорт
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если ТекущийПользователь = Неопределено Тогда
		Возврат ПустойУникальныйИдентификатор();
	Иначе
		Возврат ТекущийПользователь.УникальныйИдентификатор;
	КонецЕсли;
	
КонецФункции

// Представление пользователя ИБ для форм.
// 
// Параметры:
//  ИдентификаторПользователя - УникальныйИдентификатор - Идентификатор пользователя ИБ
// 
// Возвращаемое значение:
//  Структура - Данные представления :
// * Текст - Строка - Текст представления
// * ЦветТекста - Цвет - Цвет представления
Функция ПредставлениеПользователяИБ(ИдентификаторПользователя) Экспорт
	
	Если ЗначениеЗаполнено(ИдентификаторПользователя) Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователя);
		Если ПользовательИБ = Неопределено Тогда
			Текст = "<Пользователь не найден>";
			ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		Иначе
			Текст = ПользовательИБ.ПолноеИмя;
			ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли;
	Иначе
		Текст = "<Все пользователи>";
		ЦветТекста = WebЦвета.ГрифельноСерый;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", Текст);
	Результат.Вставить("ЦветТекста", ЦветТекста);
	
	Возврат Результат;
				
КонецФункции

// Функция возвращает ключ менеджера записи регистра сведений на основе 
//	https://fastcode.im/Templates/7545
//
// Параметры:
//  ДанныеЗаписи	- РегистрСведенийМенеджерЗаписи, Структура, Произвольный - коллекция с данными записи
//  ИмяРегистра		- Строка - Имя регистра. Если не передано, то метаданные регистра берутся из ДанныеЗаписи
// 
// Возвращаемое значение:
//  РегистрСведенийКлючЗаписи - Ключ записи регистра
//
Функция КлючМенеджераЗаписиРегистраСведений(ДанныеЗаписи, ИмяРегистра = "") Экспорт
	
	Если ПустаяСтрока(ИмяРегистра) Тогда
		МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗнч(ДанныеЗаписи));
	Иначе
		МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	КонецЕсли;
	
	ЗначенияКлюча = Новый Структура("Период", Неопределено);
	
	Для Каждого ОписаниеИзмерения Из МетаданныеРегистра.Измерения Цикл
		ЗначенияКлюча.Вставить(ОписаниеИзмерения.Имя);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЗначенияКлюча, ДанныеЗаписи);
	
	Возврат РегистрыСведений[МетаданныеРегистра.Имя].СоздатьКлючЗаписи(ЗначенияКлюча);
	
КонецФункции

// Донастраивает форму списка так, чтобы она стала формой выбора.
// Позволяет полноценно использовать одну форму как в качестве основной формы списка, так и формы выбора
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма списка:
//  * Параметры - ДанныеФормыСтруктура - параметры формы:
//  ** РежимВыбора - Булево - Режим выбора формы
//  ** МножественныйВыбор - Булево - Режим множественного выбора формы
//  ИмяЭлемента  - Строка - Имя элемента динамического списка
//
Процедура ИнициализироватьФормуВыбора(Форма, ИмяЭлемента = "Список") Экспорт
	
	ЭлементФормы  = Форма.Элементы.Найти(ИмяЭлемента);
	РеквизитФормы = Форма[ЭлементФормы.ПутьКДанным]; // ДинамическийСписок
	
	ЭлементФормы.РежимВыбора = (Форма.Параметры.РежимВыбора = Истина);
	ЭлементФормы.МножественныйВыбор = (Форма.Параметры.МножественныйВыбор = Истина);
	
	РеквизитФормы.АвтоматическоеСохранениеПользовательскихНастроек = НЕ ЭлементФормы.РежимВыбора;

КонецПроцедуры

// Параметры открытия формы установки подмены.
// 
// Параметры:
//  ВерсияОбработки - СправочникСсылка.ВерсииПлатформенныхОбработок
//  ДляТекущегоПользователя - Булево
// 
// Возвращаемое значение:
//  Структура - Параметры открытия формы установки подмены:
// * ЗначенияЗаполнения - Структура -:
// ** ВерсияОбработки - СправочникСсылка.ВерсииПлатформенныхОбработок
// ** Использование - Булево
// * Модифицированность - Булево
Функция ПараметрыОткрытияФормыУстановкиПодмены(ВерсияОбработки, ДляТекущегоПользователя) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВерсияОбработки", ВерсияОбработки);
	ЗначенияЗаполнения.Вставить("Использование"  , Истина);
	
    ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("Модифицированность", Истина);
	
	ПараметрыЗаписи = Новый Структура;
	Если ДляТекущегоПользователя Тогда
		ПараметрыЗаписи.Вставить("Владелец", ИдентификаторТекущегоПользователяИБ());
	КонецЕсли;
	ПараметрыЗаписи.Вставить("Обработка", ЗначениеРеквизитаОбъекта(ВерсияОбработки, "Владелец"));

	МенеджерЗаписи = РегистрыСведений.ПодменаПлатформенныхОбработок.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыЗаписи);
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		ПараметрыФормы.Вставить("Ключ", КлючМенеджераЗаписиРегистраСведений(МенеджерЗаписи));
	Иначе
		Для Каждого КлючИЗначение Из ПараметрыЗаписи Цикл
			ТекущийКлюч = КлючИЗначение.Ключ; // Строка
			ЗначенияЗаполнения.Вставить(ТекущийКлюч, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Подсистема существует БСП.
// 
// Параметры:
//  ПолноеИмяПодсистемы - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ПодсистемаСуществуетБСП(ПолноеИмяПодсистемы) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти("ОбщегоНазначения") <> Неопределено Тогда
		
		//@skip-check empty-except-statement
		Попытка
			УстановитьБезопасныйРежим(Истина);
			// BSLLS:ExecuteExternalCodeInCommonModule-off
			Возврат Вычислить("ОбщегоНазначения.ПодсистемаСуществует(ПолноеИмяПодсистемы)");
		Исключение // BSLLS:MissingCodeTryCatchEx-off
			// Предполагаем, что это не БСП
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Подсистема существует БСП - Пользователи.
// 
// Возвращаемое значение:
//  Булево
Функция ПодсистемаСуществуетБСП_Пользователи() Экспорт
	
	Возврат ПодсистемаСуществуетБСП("СтандартныеПодсистемы.Пользователи");
	
КонецФункции

// Список при получении данных на сервере.
// 
// Параметры:
//  ИмяЭлемента - Строка -  Имя элемента
//  Настройки - НастройкиКомпоновкиДанных -  Настройки :
//  * ДополнительныеСвойства - Структура -:
//  ** ПодсистемаБСП - Булево
//  Строки - СтрокиДинамическогоСписка - Строки ДС
//  - Соответствие из КлючИЗначение - Баг ЕДТ не понимает строки ДС:
//  * Значение - СтрокаДинамическогоСписка - Строка:
//  ** Данные - ДанныеФормыСтруктура - Данные строки:
//  *** Владелец - УникальныйИдентификатор - Пользователь
Процедура СписокПодменыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки) Экспорт
	
	ПараметрЦветТекста = Новый ПараметрКомпоновкиДанных("ЦветТекста");
	ПараметрТекст = Новый ПараметрКомпоновкиДанных("Текст");
	СвойствоВладельца = "Владелец";

	Для Каждого КлючИЗначение Из Строки Цикл
		
		ИдентификаторПользователя = Неопределено; // УникальныйИдентификатор
		
		Строка = КлючИЗначение.Значение;
		Если Строка.Данные.Свойство(СвойствоВладельца, ИдентификаторПользователя)
			И ТипЗнч(ИдентификаторПользователя) = Тип("УникальныйИдентификатор")
			И Строка.Данные.Свойство(СвойствоВладельца) Тогда
			
			ДанныеПредставления = ПредставлениеПользователяИБ(ИдентификаторПользователя);
			
			Оформление = Строка.Оформление.Получить(СвойствоВладельца);
			Оформление.УстановитьЗначениеПараметра(ПараметрЦветТекста, ДанныеПредставления.ЦветТекста);
			Оформление.УстановитьЗначениеПараметра(ПараметрТекст, ДанныеПредставления.Текст);
				
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Количество версий платформы в платформенных обработках.
// 
// Возвращаемое значение:
//  Число
Функция КоличествоВерсийПлатформыВПлатформенныхОбработках() Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВерсияПриложения) КАК Количество
	|ИЗ 
	|	Справочник.ВерсииПлатформенныхОбработок КАК Версии";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка[0];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Значение реквизита объекта.
// 
// Параметры:
//  Ссылка - ЛюбаяСсылка
//  ИмяРеквизита - Строка
//  ЗначениеПоУмолчанию - Неопределено, Произвольный - Значение по умолчанию
// 
// Возвращаемое значение:
//  Неопределено, Произвольный -
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ЗначениеПоУмолчанию = Неопределено)
	
	ТекстЗапроса = "ВЫБРАТЬ %1 ИЗ %2 ГДЕ Ссылка = &Ссылка"; // BSLLS:QueryParseError-off
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяРеквизита, Ссылка.Метаданные().ПолноеИмя());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗначениеПоУмолчанию;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка[0];
	КонецЕсли;
	
КонецФункции

// Создать версию обработки.
// 
// Параметры:
//  ДанныеВерсии - ВыборкаИзРезультатаЗапроса - Данные версии:
//  *Обработка - СправочникСсылка.ПлатформенныеОбработки
//  *ПолныйПуть - Строка
//  *КлючевоеИмя - Строка
//  ВерсияПриложения - Строка - Версия приложения
//  МенеджерПлатформенныхОбработок - ОбработкаОбъект.ВыгрузкаПлатформенныхОбработок
Процедура СоздатьВерсиюОбработки(ДанныеВерсии, ВерсияПриложения, МенеджерПлатформенныхОбработок)
		
	ДанныеОбработки = МенеджерПлатформенныхОбработок.ДвоичныеДанныеПлатформеннойОбработки(ДанныеВерсии.ПолныйПуть);
	Если ДанныеОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементВерсии = Справочники.ВерсииПлатформенныхОбработок.СоздатьЭлемент();
	ЭлементВерсии.Владелец = ДанныеВерсии.Обработка;
	ЭлементВерсии.ВерсияПриложения = ВерсияПриложения;
	ЭлементВерсии.Наименование = СтрШаблон("%1 (Оригинальная версия %2)", ДанныеВерсии.Обработка, ВерсияПриложения);
	ЭлементВерсии.ДанныеВерсии = Новый ХранилищеЗначения(ДанныеОбработки);
	ЭлементВерсии.ДополнительныеСвойства.Вставить("СлужебноеОбновление", Истина);
	ЭлементВерсии.КлючевоеИмя = ДанныеВерсии.КлючевоеИмя;
	ЭлементВерсии.Записать();
		
КонецПроцедуры

// Возвращает пустой уникальный идентфикатор.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - уникальный идентификатор.
//
Функция ПустойУникальныйИдентификатор() Экспорт
	
	Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
КонецФункции

// Подменяемые платформенные обработки перед запуском системы.
// 
// Возвращаемое значение:
//  РезультатЗапроса - :
//  * КлючевоеИмя - Строка
//  * ВерсияОбработки - СправочникСсылка.ВерсииПлатформенныхОбработок
Функция ПодменяемыеПлатформенныеОбработкиПередЗапускомСистемы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина); // BSLLS:SetPrivilegedMode-off
	
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодменаПлатформенныхОбработок.Владелец КАК Владелец,
	|	ПодменаПлатформенныхОбработок.Обработка КАК Обработка,
	|	ПодменаПлатформенныхОбработок.Использование КАК Использование,
	|	ПодменаПлатформенныхОбработок.ВерсияОбработки КАК ВерсияОбработки,
	|	ПодменаПлатформенныхОбработок.Комментарий КАК Комментарий,
	|	ВЫБОР
	|		КОГДА ПодменаПлатформенныхОбработок.Владелец = &ИдентификаторТекущегоПользователяИБ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ПодменыОбработок
	|ИЗ
	|	РегистрСведений.ПодменаПлатформенныхОбработок КАК ПодменаПлатформенныхОбработок
	|ГДЕ
	|	ПодменаПлатформенныхОбработок.Владелец В (&ИдентификаторТекущегоПользователяИБ, &ПустойУникальныйИдентификатор)
	|	И ПодменаПлатформенныхОбработок.Использование = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ПодменыОбработок.Обработка КАК Обработка,
	|	МАКСИМУМ(ПодменыОбработок.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_МаксимальныйПриоритет
	|ИЗ
	|	ПодменыОбработок КАК ПодменыОбработок
	|	
	|СГРУППИРОВАТЬ ПО
	|	ПодменыОбработок.Обработка;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИменаПодключения.КлючевоеИмя КАК КлючевоеИмя,
	|	ПодменыОбработок.ВерсияОбработки КАК ВерсияОбработки
	|ИЗ
	|	ВТ_МаксимальныйПриоритет КАК МаксимальныйПриоритет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодменыОбработок КАК ПодменыОбработок
	|		ПО МаксимальныйПриоритет.Обработка = ПодменыОбработок.Обработка
	|			И МаксимальныйПриоритет.Приоритет = ПодменыОбработок.Приоритет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПлатформенныеОбработки.ИменаПодключения КАК ИменаПодключения
	|		ПО МаксимальныйПриоритет.Обработка = ИменаПодключения.Ссылка";	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ИдентификаторТекущегоПользователяИБ", ИдентификаторТекущегоПользователяИБ());
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", ПустойУникальныйИдентификатор());
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Выборка подменяемых платформенных обработок перед запуском системы.
// 
// Параметры:
//  РезультатЗапроса - см. ПодменяемыеПлатформенныеОбработкиПередЗапускомСистемы
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса: см. ПодменяемыеПлатформенныеОбработкиПередЗапускомСистемы
//
// BSLLS:MissingReturnedValueDescription-off
Функция ВыборкаПодменяемыхПлатформенныхОбработокПередЗапускомСистемы(РезультатЗапроса)
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

#КонецОбласти
