// @strict-types

#Область ОбработчикиСобытийФормы

// При создании на сервере.
// 
// Параметры:
//  Отказ - Булево - Отказ
//  СтандартнаяОбработка - Булево - Стандартная обработка
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
    УПО_Сервер.ИнициализироватьФормуВыбора(ЭтотОбъект);
	
	ОбновитьВладельцаСпискаНаСервере();
	
	ЗаполнитьУсловноеОформлениеТекущейВерсииПлатформы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОбработки

// Список обработки при активизации строки.
// 
// Параметры:
//  Элемент - ТаблицаФормы - Элемент
&НаКлиенте
Процедура СписокОбработкиПриАктивизацииСтроки(Элемент)
	
    Обработка = ТекущаяОбработкаИзСписка();
	Если Обработка = ТекущаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбработка = Обработка;
	ПодключитьОбработчикОжидания("ОбновитьВладельцаСписка", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПодмены

&НаСервереБезКонтекста
Процедура СписокПодменыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	УПО_Сервер.СписокПодменыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки);	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
 
// Обновить владельца списка на сервере.
&НаСервере
Процедура ОбновитьВладельцаСпискаНаСервере()

	Список.Параметры.УстановитьЗначениеПараметра("Владелец", ТекущаяОбработка);
	ОбновитьВладельцаСпискаПодменыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВладельцаСпискаПодменыНаСервере()

	ЭлементыОтбора = СписокПодмены.Отбор.Элементы;
	КлючОтбора = "Отбор по обработке";
	ОтборОбработки = Неопределено;
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.ИдентификаторПользовательскойНастройки = КлючОтбора Тогда
			ОтборОбработки = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОтборОбработки = Неопределено Тогда
		ОтборОбработки = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборОбработки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Обработка");
		ОтборОбработки.ИдентификаторПользовательскойНастройки = КлючОтбора;
		ОтборОбработки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	ОтборОбработки.ПравоеЗначение = ТекущаяОбработка;
	
КонецПроцедуры

// Обновить владельца списка.
&НаКлиенте
Процедура ОбновитьВладельцаСписка()
	
	ОбновитьВладельцаСпискаНаСервере();
	
КонецПроцедуры

// Текущая обработка из списка.
// 
// Возвращаемое значение:
//  СправочникСсылка.УПО_ПлатформенныеОбработки, Произвольный - Текущая обработка из списка
&НаКлиенте
Функция ТекущаяОбработкаИзСписка()
	
	Обработка = Элементы.СписокОбработки.ТекущаяСтрока;
	Если ТипЗнч(Обработка) <> Тип("СправочникСсылка.УПО_ПлатформенныеОбработки") Тогда
		Обработка = ПредопределенноеЗначение("Справочник.УПО_ПлатформенныеОбработки.ПустаяСсылка");
	КонецЕсли;
	
	Возврат Обработка;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУсловноеОформлениеТекущейВерсииПлатформы()
	
	КоличествоВерсий = УПО_Сервер.КоличествоВерсийПлатформыВПлатформенныхОбработках();
	Если КоличествоВерсий > 1 Тогда
	
		Оформление = Список.УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВерсияПриложения");
		ЭлементОтбора.ПравоеЗначение = УПО_КлиентСервер.ВерсияПриложения();
		
		ШрифтСтиля = УПО_КлиентСервер.МультиязычноеСвойствоОбъекта(
			ШрифтыСтиля, "ВажнаяНадписьШрифт,ImportantLabelFont");
		
		Оформление.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтСтиля);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
