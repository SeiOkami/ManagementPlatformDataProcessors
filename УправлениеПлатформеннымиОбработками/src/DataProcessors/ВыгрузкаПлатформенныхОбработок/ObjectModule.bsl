// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Эталонные данные.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - :
//  * Наименование - Строка
//  * КлючевыеИмена - Строка
//  * УникальныйИдентификатор - Строка
Функция ЭталонныеДанные() Экспорт
	
	ТабличныйДокумент = ПолучитьМакет("ПредопределенныеДанные");
	
	ОбластьЯчеек   = ТабличныйДокумент.Область(1, 1, 
	ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);

    ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);

    ПостроительОтчета = Новый ПостроительОтчета;
    ПостроительОтчета.ИсточникДанных = ИсточникДанных;
    ПостроительОтчета.Выполнить();

    //@skip-check constructor-function-return-section
    Возврат ПостроительОтчета.Результат.Выгрузить();
	
КонецФункции

// Заполнить эталонные данные.
Процедура ЗаполнитьЭталонныеДанные() Экспорт
	
	ЭталонныеДанные = ЭталонныеДанные();
	ПлатформенныеОбработки.Загрузить(ЭталонныеДанные);
	
КонецПроцедуры

// Двоичные данные платформенной обработки.
// 
// Параметры:
//  ПолныйПуть - Строка
//  
// Возвращаемое значение:
//  ДвоичныеДанные, Неопределено -
Функция ДвоичныеДанныеПлатформеннойОбработки(Знач ПолныйПуть) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".epf");
	ДвоичныеДанные = Неопределено;
	
	Попытка
		
		КопироватьФайл(ПолныйПуть, ИмяВременногоФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		ПричинаОшибки  = "Ресурс не найден";
		СообщитьОшибку = Истина;
		Если СтрНайти(ОписаниеОшибки, ПричинаОшибки) > 0 Тогда
			ОписаниеОшибки = ПричинаОшибки;
			СообщитьОшибку = Ложь;
		КонецЕсли;
		
		ТекстОшибки = "Не удалось получить версию обработки %1 по причине: %2";
		ТекстОшибки = СтрШаблон(ТекстОшибки, ПолныйПуть, ОписаниеОшибки);
		
		ЗаписьЖурналаРегистрации("ВыгрузкаПлатформенныхОбработок.ДвоичныеДанныеПлатформеннойОбработки", 
			УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
		Если СообщитьОшибку Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстОшибки;
			Сообщение.Сообщить();
		КонецЕсли;
		
	КонецПопытки;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ДвоичныеДанные;
	
КонецФункции

// Полный путь платформенной обработки.
// 
// Параметры:
//  СистемноеИмя - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ПолныйПутьПлатформеннойОбработки(СистемноеИмя) Экспорт
	
	Возврат СтрШаблон("v8res://mngbase/%1.epf", СистемноеИмя);
			
КонецФункции

// Сведения о внешней обработке.
// 
// Возвращаемое значение:
//  Неопределено - 
//  - см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке
Функция СведенияОВнешнейОбработке() Экспорт
	
	Попытка
		МодулиБСП = МодулиБСП();	
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ПараметрыРегистрации = МодулиБСП.ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	ПараметрыРегистрации.Наименование = "ШаблонОбработкиДлительнойОперацииСПрогрессом";
	ПараметрыРегистрации.Информация = "Шаблон обработки с длительной операцией и выводом прогресса";
	ПараметрыРегистрации.Вид = МодулиБСП.ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "1.4.1";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Информация = "Позволяет выгрузить встроенные в платформу инструменты как внешние обработки";
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = "Открытие формы обработки";
	Команда.Идентификатор = "ВыполнитьДлительнуюОперацию";
	Команда.Использование = МодулиБСП.ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Команда.ПоказыватьОповещение = Ложь;
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыРегистрации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Модули БСП.
// 
// Возвращаемое значение:
//  Структура - модули БСП:
// * ДополнительныеОтчетыИОбработки - CommonModule.ДополнительныеОтчетыИОбработки
// * ДополнительныеОтчетыИОбработкиКлиентСервер - CommonModule.ДополнительныеОтчетыИОбработкиКлиентСервер
Функция МодулиБСП()
	
	ИменаМодулей = "ДополнительныеОтчетыИОбработки,ДополнительныеОтчетыИОбработкиКлиентСервер";
	Возврат ОбщиеМодули(ИменаМодулей); //@skip-check constructor-function-return-section - ЕДТ не умеет
	
КонецФункции

// Общие модули.
// 
// Параметры:
//  ИменаМодулей - Строка - Имена общих модулей, разделенные через запятую
// 
// Возвращаемое значение:
//  Структура
Функция ОбщиеМодули(ИменаМодулей)
	
	ОбщиеМодули = Новый Структура(ИменаМодулей);
	Для Каждого КлючИЗначение Из ОбщиеМодули Цикл
		
		//@skip-check server-execution-safe-mode
		// BSLLS:ExecuteExternalCode-off
		ОбщиеМодули[КлючИЗначение.Ключ] = Вычислить(КлючИЗначение.Ключ); // ОбщийМодуль
		
	КонецЦикла;
	
	Возврат ОбщиеМодули;
	
КонецФункции

#КонецОбласти

#КонецЕсли
